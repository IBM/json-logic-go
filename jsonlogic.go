/*
MIT License

Copyright (c) 2018 IBM

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// Package jsonlogic is a lightweight rule engine that uses the syntax defined on jsonlogic.com
package jsonlogic

import (
	"encoding/json"
	"fmt"
)

// stringToInterface converts a string json to an interface{}
func stringToInterface(input string) (interface{}, error) {
	b := []byte(input)
	var f interface{}
	err := json.Unmarshal(b, &f)

	if err != nil {
		return input, fmt.Errorf("Unmarshal warning: %s", err)
	}

	return f, err
}

// Apply takes in a rule and an optional data object and applies its logic.
// Parameters are passed as strings and will be unmarshalled.
func Apply(inputs ...string) (interface{}, error) {
	var rule, data interface{}
	if len(inputs) < 1 {
		//TODO: Expected behavior with no params?
		return nil, nil
	}

	rule, err := stringToInterface(inputs[0])
	if err != nil {
		return nil, err
	}

	if len(inputs) > 1 {
		//We have data inputs
		data, err = stringToInterface(inputs[1])
		if err != nil {
			return nil, err
		}

	}

	return ApplyJSONInterfaces(rule, data)
}

// ApplyJSONInterfaces takes a rule and an optional data object and applies its logic.
// The parameters are unmarshalled JSON interfaces.
// Note this is not meant to be used with any other types except an interface{} generated by Go's Unmarshal method.
func ApplyJSONInterfaces(inputs ...interface{}) (interface{}, error) {
	var rule, data interface{}
	if len(inputs) < 1 {
		//TODO: Expected behavior with no params?
		return nil, nil
	}
	rule = inputs[0]
	if len(inputs) > 1 {
		//We have data inputs
		data = inputs[1]
	}

	switch rule.(type) {
	case map[string]interface{}:
		//It's a rule
		inputmap := rule.(map[string]interface{})

		for operator, value := range inputmap {
			value, err := ApplyJSONInterfaces(value, data)
			if err != nil {
				return nil, err
			}

			switch operator {
			case "===":
				return opEqualStrict(value, data)
			case "==":
				return opEqual(value, data)
			case "!==":
				return opNotEqualStrict(value, data)
			case "!=":
				return opNotEqual(value, data)
			case "!!":
				return opDoubleNot(value, data)
			case "!":
				return opNot(value, data)
			case "<":
				return opSmallerThan(value, data)
			case ">":
				return opGreaterThan(value, data)
			case ">=":
				return opGreaterEqThan(value, data)
			case "<=":
				return opSmallerEqThan(value, data)
			case "+":
				return opSum(value, data)
			case "-":
				return opSub(value, data)
			case "*":
				return opMult(value, data)
			case "/":
				return opDiv(value, data)
			case "%":
				return opMod(value, data)
			case "and":
				return opAnd(value, data)
			case "or":
				return opOr(value, data)
			case "merge":
				return opMerge(value, data)
			case "in":
				return opIn(value, data)
			case "substr":
				return opSubstr(value, data)
			case "cat":
				return opCat(value, data)
			case "map":
				return opMap(value, data)
			case "log":
				return opLog(value)
			case "var":
				return opVar(value, data)
			case "if", "?:": // "?:" is an undocumented alias of 'if'
				return opIf(value, data)
			case "max":
				return opMax(value, data)
			case "min":
				return opMin(value, data)
			case "all":
				return opAll(value, data)
			case "none":
				return opNone(value, data)
			case "some":
				return opSome(value, data)
			case "missing":
				return opMissing(value, data)
			case "missing_some":
				return opMissingSome(value, data)
			case "filter":
				return opFilter(value, data)
			case "reduce":
				return opReduce(value, data)
			default:
				if res, err := opCustom(operator, value, data); err != nil {
					return nil, fmt.Errorf("Error: %s", err)
				} else {
					return res, nil
				}
			}
		}
		break
	default:
		//Non-rule
		return rule, nil
	}

	return nil, nil

}
